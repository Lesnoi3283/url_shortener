// Code generated by MockGen. DO NOT EDIT.
// Source: url_shortener_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/Lesnoi3283/url_shortener/internal/app/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockURLStorageInterface is a mock of URLStorageInterface interface.
type MockURLStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockURLStorageInterfaceMockRecorder
}

// MockURLStorageInterfaceMockRecorder is the mock recorder for MockURLStorageInterface.
type MockURLStorageInterfaceMockRecorder struct {
	mock *MockURLStorageInterface
}

// NewMockURLStorageInterface creates a new mock instance.
func NewMockURLStorageInterface(ctrl *gomock.Controller) *MockURLStorageInterface {
	mock := &MockURLStorageInterface{ctrl: ctrl}
	mock.recorder = &MockURLStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLStorageInterface) EXPECT() *MockURLStorageInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockURLStorageInterface) CreateUser(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockURLStorageInterfaceMockRecorder) CreateUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockURLStorageInterface)(nil).CreateUser), ctx)
}

// DeleteBatchWithUserID mocks base method.
func (m *MockURLStorageInterface) DeleteBatchWithUserID(userID int) (chan string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatchWithUserID", userID)
	ret0, _ := ret[0].(chan string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBatchWithUserID indicates an expected call of DeleteBatchWithUserID.
func (mr *MockURLStorageInterfaceMockRecorder) DeleteBatchWithUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatchWithUserID", reflect.TypeOf((*MockURLStorageInterface)(nil).DeleteBatchWithUserID), userID)
}

// Get mocks base method.
func (m *MockURLStorageInterface) Get(ctx context.Context, short string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, short)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockURLStorageInterfaceMockRecorder) Get(ctx, short interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockURLStorageInterface)(nil).Get), ctx, short)
}

// GetShortURLCount mocks base method.
func (m *MockURLStorageInterface) GetShortURLCount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURLCount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURLCount indicates an expected call of GetShortURLCount.
func (mr *MockURLStorageInterfaceMockRecorder) GetShortURLCount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURLCount", reflect.TypeOf((*MockURLStorageInterface)(nil).GetShortURLCount), ctx)
}

// GetUserCount mocks base method.
func (m *MockURLStorageInterface) GetUsersCount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersCount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCount indicates an expected call of GetUserCount.
func (mr *MockURLStorageInterfaceMockRecorder) GetUserCount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersCount", reflect.TypeOf((*MockURLStorageInterface)(nil).GetUsersCount), ctx)
}

// GetUserUrls mocks base method.
func (m *MockURLStorageInterface) GetUserUrls(ctx context.Context, userID int) ([]entities.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserUrls", ctx, userID)
	ret0, _ := ret[0].([]entities.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserUrls indicates an expected call of GetUserUrls.
func (mr *MockURLStorageInterfaceMockRecorder) GetUserUrls(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserUrls", reflect.TypeOf((*MockURLStorageInterface)(nil).GetUserUrls), ctx, userID)
}

// Ping mocks base method.
func (m *MockURLStorageInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLStorageInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLStorageInterface)(nil).Ping))
}

// Save mocks base method.
func (m *MockURLStorageInterface) Save(ctx context.Context, url entities.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockURLStorageInterfaceMockRecorder) Save(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockURLStorageInterface)(nil).Save), ctx, url)
}

// SaveBatch mocks base method.
func (m *MockURLStorageInterface) SaveBatch(ctx context.Context, urls []entities.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", ctx, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockURLStorageInterfaceMockRecorder) SaveBatch(ctx, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockURLStorageInterface)(nil).SaveBatch), ctx, urls)
}

// SaveBatchWithUserID mocks base method.
func (m *MockURLStorageInterface) SaveBatchWithUserID(ctx context.Context, userID int, urls []entities.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatchWithUserID", ctx, userID, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatchWithUserID indicates an expected call of SaveBatchWithUserID.
func (mr *MockURLStorageInterfaceMockRecorder) SaveBatchWithUserID(ctx, userID, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatchWithUserID", reflect.TypeOf((*MockURLStorageInterface)(nil).SaveBatchWithUserID), ctx, userID, urls)
}

// SaveWithUserID mocks base method.
func (m *MockURLStorageInterface) SaveWithUserID(ctx context.Context, userID int, url entities.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWithUserID", ctx, userID, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWithUserID indicates an expected call of SaveWithUserID.
func (mr *MockURLStorageInterfaceMockRecorder) SaveWithUserID(ctx, userID, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWithUserID", reflect.TypeOf((*MockURLStorageInterface)(nil).SaveWithUserID), ctx, userID, url)
}
